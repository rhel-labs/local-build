Make sure libvirt is installed and your user can create virtual machines without escalated privileges.

Download packer 1.4.2 from packer.io and put somewhere you can execute it.  E.G. /home/userid/bin/ with that as part of your PATH, or just use the full path when calling it.  There is a 'packer' command shipped by default in RHEL from the cracklib-dicts package.

Download the binary ISO and put it somewhere you can access it.  You will need the path and the checksum of the ISO for the JSON file.

Clone this repo, all commands will be run relative to the top level of this directory.

Set up the ISO to build from.

Get the MD5 checksum for the ISO you've downloaded.

 md5sum isos/rhel-8.0-x86_64-dvd.iso

 Add this and the path to the ISO in the following variables in the "builders" section of the JSON file.

 "iso_url": "/path/to/iso/rhel-8.0-x86_64-dvd.iso",
 "iso_checksum": "8a0bUseTheRightmd5sum3f39",
 "iso_checksum_type": "md5",

To set up the right subscription:

in build/1_enablerepo.sh there are several ways to get the pool ID of the subscription that should be used.  These use pattern matching and some output cutting to get the right pool.  The first is for using Employee SKUs, the second for regular RHEL SKUs, the third for Developer Suite SKUs.  You may want to check the output and order of reporting if more than one pool may be reported, e.g. where physical and virtual entitlements are available in the account.  As default, this uses Employee SKUs.

All other build scripts can be used as is or copied from the latest learn-katacoda repo.  To test additional build scripts, add the new script to the build/ directory and the "scripts" block under "provisioners" in the JSON file.

To build an image:

Be sure the output-qemu/ does not exist.

Execute the following:

RHN_USER=<userid> RHN_PASS=<userpass>  ~/bin/packer build rhel-8.0-x86_64-libvirt.json

Set the variables with the user/pass combo for the portal account that has subscriptions you want to use.

To test the resulting image with KVM:

You can launch the image created in the output-qemu/ directory.  You can either use virtual machine manager or virt-install --import

virt-install -n packer-test --import --disk output-qemu/rhel-8.0-katacoda-base --memory 2048 --vcpus 2 --noautoconsole

Once you've create the VM using that image, each subsequent build will use the same disk image name.  This means removing the ouput-qemu/ directory and doing another successful build will drop the same image in the same place, and you can just restart the existing VM without recreating.

This image can now be used to test the steps for your scenario.
